import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javazoom.jlgui.basicplayer.BasicController;
import javazoom.jlgui.basicplayer.BasicPlayer;
import javazoom.jlgui.basicplayer.BasicPlayerEvent;
import javazoom.jlgui.basicplayer.BasicPlayerException;
import javazoom.jlgui.basicplayer.BasicPlayerListener;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;

public class InterfaceGrafica extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceGrafica
     */
public InterfaceGrafica() {
       
        initComponents();
        basic_playerlistener();   
        JlistListener();   
        SliderChange();
        
        
       new EditorEtiquetas(jLabelTitulo,jLabelGenero,jLabelComentario,jLabelGrupo,jLabelFecha,jLabelAlbum,jListAgregarCanciones,datos); 
        
          new JLaTexto(fuente1,"Ruta :"+ruta,jLabelRuta,Color.WHITE ,15);
         
          new ToolTipText(jButtonReproducir,"Pulsa para Reproducir");
          new ToolTipText(jButtonPausar,"Pulsa para Pausar");
          new ToolTipText(jButtonParar,"Pulsa para Parar");
          new ToolTipText(jButtonAvance,"Pulsa para Avanzar");
          new ToolTipText(jButtonRetroceso,"Pulsa para Retroceder");
          new ToolTipText(jButtonAgregarCanciones,"Agrega los MP3 al Directorio");
          new ToolTipText(jButtonRuta,"Establece la ruta por defecto para agrgar canciones");
          new ToolTipText(jButtonDirectorio,"Agregar una sola cancion desde una ruta");
          new ToolTipText(jButtonRepetir,"Activa la Reproduccion Comntinua");
          new ToolTipText(jButtonSiguiente,"Al terminar reproduce la siguiente de la lista");
          new ToolTipText(jButtonMute,"Activa / Desactiva el silencio");
          
          
          new BotonesEscucha(jButtonReproducir,"278-play22.png","278-play2.png");
          new BotonesEscucha(jButtonPausar,"279-pause2.png","279-pause.png");
          new BotonesEscucha(jButtonParar,"280-stop2.png","280-stop.png");
          new BotonesEscucha(jButtonAvance,"282-next2.png","282-next.png");
          new BotonesEscucha(jButtonRetroceso,"281-previous2.png","281-previous.png");
          new BotonesEscucha(jButtonAgregarCanciones,"Folder-plus2.png","Folder-plus.png");
          new BotonesEscucha(jButtonRuta,"049-folder-open2.png","049-folder-open.png");       
          new BotonesEscucha(jButtonDirectorio,"carpeta2.png","carpeta.png");
          new BotonesEscucha(jButtonRepetir,"302-loop2.png","302-loop.png");
          new BotonesEscucha(jButtonSiguiente,"133-spinner112.png","133-spinner11.png");
          new BotonesEscucha(jButtonMute,"030-feed2.png","030-feed.png");

          
          jSliderBalance.setEnabled(false);
          jSliderControlVolumen.setEnabled(false);
          jSliderProgresoMP3.setEnabled(false);
          
}


/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListAgregarCanciones = new javax.swing.JList<>();
        jButtonParar = new javax.swing.JButton();
        jButtonPausar = new javax.swing.JButton();
        jButtonRetroceso = new javax.swing.JButton();
        jButtonAvance = new javax.swing.JButton();
        jButtonSiguiente = new javax.swing.JButton();
        jButtonAgregarCanciones = new javax.swing.JButton();
        jButtonRepetir = new javax.swing.JButton();
        jButtonReproducir = new javax.swing.JButton();
        jButtonDirectorio = new javax.swing.JButton();
        jButtonRuta = new javax.swing.JButton();
        jButtonMute = new javax.swing.JButton();
        jSliderProgresoMP3 = new javax.swing.JSlider();
        jSliderControlVolumen = new javax.swing.JSlider();
        jSliderBalance = new javax.swing.JSlider();
        jLabelRuta = new javax.swing.JLabel();
        jLabelCancion = new javax.swing.JLabel();
        jLabelInterface = new javax.swing.JLabel();
        jLabelTexto = new javax.swing.JLabel();
        jLabelTitulo = new javax.swing.JLabel();
        jLabelGenero = new javax.swing.JLabel();
        jLabelFecha = new javax.swing.JLabel();
        jLabelAlbum = new javax.swing.JLabel();
        jLabelPista = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();
        jLabelTamano = new javax.swing.JLabel();
        jLabelFRate = new javax.swing.JLabel();
        jLabelBitrate = new javax.swing.JLabel();
        jLabelTranscurrido = new javax.swing.JLabel();
        jLabelTiempo = new javax.swing.JLabel();
        jLabelVolumen = new javax.swing.JLabel();
        jLabelBalance = new javax.swing.JLabel();
        jLabelComentario = new javax.swing.JLabel();
        jLabelGrupo = new javax.swing.JLabel();
        jLabeFondo = new javax.swing.JLabel();
        jLabelImagen = new javax.swing.JLabel();
        JlsLIstaCanciones = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(830, 750));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(900, 750));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 750));
        jPanel1.setPreferredSize(new java.awt.Dimension(830, 750));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jListAgregarCanciones.setBackground(new java.awt.Color(0, 0, 0));
        jListAgregarCanciones.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jListAgregarCanciones);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 410, 260));

        jButtonParar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/280-stop.png"))); // NOI18N
        jButtonParar.setBorderPainted(false);
        jButtonParar.setContentAreaFilled(false);
        jButtonParar.setFocusable(false);
        jButtonParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPararActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonParar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 580, -1, -1));

        jButtonPausar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/279-pause.png"))); // NOI18N
        jButtonPausar.setBorderPainted(false);
        jButtonPausar.setContentAreaFilled(false);
        jButtonPausar.setDefaultCapable(false);
        jButtonPausar.setFocusable(false);
        jButtonPausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPausarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonPausar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 580, -1, -1));

        jButtonRetroceso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/281-previous.png"))); // NOI18N
        jButtonRetroceso.setBorderPainted(false);
        jButtonRetroceso.setContentAreaFilled(false);
        jButtonRetroceso.setFocusable(false);
        jButtonRetroceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetrocesoActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRetroceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 580, -1, -1));

        jButtonAvance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/282-next.png"))); // NOI18N
        jButtonAvance.setBorderPainted(false);
        jButtonAvance.setContentAreaFilled(false);
        jButtonAvance.setFocusable(false);
        jButtonAvance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAvanceActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAvance, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 580, -1, -1));

        jButtonSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/133-spinner11.png"))); // NOI18N
        jButtonSiguiente.setBorderPainted(false);
        jButtonSiguiente.setContentAreaFilled(false);
        jButtonSiguiente.setFocusable(false);
        jButtonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguienteActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 580, 50, 40));

        jButtonAgregarCanciones.setBackground(new java.awt.Color(0, 0, 0));
        jButtonAgregarCanciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/Folder-plus.png"))); // NOI18N
        jButtonAgregarCanciones.setBorderPainted(false);
        jButtonAgregarCanciones.setContentAreaFilled(false);
        jButtonAgregarCanciones.setFocusPainted(false);
        jButtonAgregarCanciones.setFocusable(false);
        jButtonAgregarCanciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarCancionesActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAgregarCanciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 630, -1, -1));

        jButtonRepetir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/302-loop.png"))); // NOI18N
        jButtonRepetir.setBorderPainted(false);
        jButtonRepetir.setContentAreaFilled(false);
        jButtonRepetir.setFocusable(false);
        jButtonRepetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRepetirActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRepetir, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 580, -1, -1));

        jButtonReproducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/278-play2.png"))); // NOI18N
        jButtonReproducir.setBorderPainted(false);
        jButtonReproducir.setContentAreaFilled(false);
        jButtonReproducir.setFocusPainted(false);
        jButtonReproducir.setFocusable(false);
        jButtonReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReproducirActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonReproducir, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 580, -1, -1));

        jButtonDirectorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/carpeta.png"))); // NOI18N
        jButtonDirectorio.setBorderPainted(false);
        jButtonDirectorio.setContentAreaFilled(false);
        jButtonDirectorio.setFocusPainted(false);
        jButtonDirectorio.setFocusable(false);
        jButtonDirectorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDirectorioActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonDirectorio, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 630, -1, -1));

        jButtonRuta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/049-folder-open.png"))); // NOI18N
        jButtonRuta.setBorderPainted(false);
        jButtonRuta.setContentAreaFilled(false);
        jButtonRuta.setFocusable(false);
        jButtonRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRutaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRuta, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 630, -1, -1));

        jButtonMute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/030-feed.png"))); // NOI18N
        jButtonMute.setBorderPainted(false);
        jButtonMute.setContentAreaFilled(false);
        jButtonMute.setFocusable(false);
        jButtonMute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMuteActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonMute, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 630, -1, -1));

        jSliderProgresoMP3.setValue(0);
        jSliderProgresoMP3.setOpaque(false);
        jPanel1.add(jSliderProgresoMP3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 690, 380, -1));

        jSliderControlVolumen.setBackground(new java.awt.Color(0, 0, 0));
        jSliderControlVolumen.setForeground(new java.awt.Color(0, 0, 0));
        jSliderControlVolumen.setValue(80);
        jSliderControlVolumen.setOpaque(false);
        jPanel1.add(jSliderControlVolumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 630, 260, -1));

        jSliderBalance.setMinimum(-100);
        jSliderBalance.setValue(0);
        jSliderBalance.setOpaque(false);
        jPanel1.add(jSliderBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 690, 260, -1));

        jLabelRuta.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelRuta.setForeground(new java.awt.Color(255, 255, 255));
        jLabelRuta.setText("Ruta :");
        jPanel1.add(jLabelRuta, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));

        jLabelCancion.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelCancion.setForeground(new java.awt.Color(255, 255, 255));
        jLabelCancion.setText("Cancion :");
        jPanel1.add(jLabelCancion, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, -1, -1));

        jLabelInterface.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fondo/por.png"))); // NOI18N
        jPanel1.add(jLabelInterface, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 570, 770, 180));

        jLabelTexto.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabelTexto.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTexto.setText("Etiquetas id MP3");
        jPanel1.add(jLabelTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, -1, -1));

        jLabelTitulo.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelTitulo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitulo.setText("Titulo :");
        jPanel1.add(jLabelTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 140, -1, -1));

        jLabelGenero.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelGenero.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGenero.setText("Genero :");
        jPanel1.add(jLabelGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 170, -1, -1));

        jLabelFecha.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelFecha.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFecha.setText("Fecha :");
        jPanel1.add(jLabelFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 260, -1, -1));

        jLabelAlbum.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelAlbum.setForeground(new java.awt.Color(255, 255, 255));
        jLabelAlbum.setText("Album :");
        jPanel1.add(jLabelAlbum, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 290, -1, -1));

        jLabelPista.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelPista.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPista.setText("Pista :");
        jPanel1.add(jLabelPista, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, -1, -1));

        jLabelTotal.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelTotal.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTotal.setText("Total :");
        jPanel1.add(jLabelTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 320, -1, -1));

        jLabelTamano.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelTamano.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTamano.setText("Peso :");
        jPanel1.add(jLabelTamano, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 350, -1, -1));

        jLabelFRate.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelFRate.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFRate.setText("Velocidad de Muestreo :");
        jPanel1.add(jLabelFRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 380, -1, -1));

        jLabelBitrate.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelBitrate.setForeground(new java.awt.Color(255, 255, 255));
        jLabelBitrate.setText("Tasa de Bits :");
        jPanel1.add(jLabelBitrate, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 410, -1, -1));

        jLabelTranscurrido.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelTranscurrido.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTranscurrido.setText("Transcurrido :");
        jPanel1.add(jLabelTranscurrido, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 440, -1, -1));

        jLabelTiempo.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelTiempo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTiempo.setText("Duracion :");
        jPanel1.add(jLabelTiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 470, -1, -1));

        jLabelVolumen.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabelVolumen.setForeground(new java.awt.Color(255, 255, 255));
        jLabelVolumen.setText("Volumen : 80");
        jPanel1.add(jLabelVolumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 500, -1, -1));

        jLabelBalance.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabelBalance.setForeground(new java.awt.Color(255, 255, 255));
        jLabelBalance.setText("Balance : 0");
        jPanel1.add(jLabelBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 500, -1, -1));

        jLabelComentario.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelComentario.setForeground(new java.awt.Color(255, 255, 255));
        jLabelComentario.setText("Comentario :");
        jPanel1.add(jLabelComentario, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, -1, -1));

        jLabelGrupo.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabelGrupo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGrupo.setText("Grupo :");
        jPanel1.add(jLabelGrupo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 230, -1, -1));

        jLabeFondo.setBackground(new java.awt.Color(255, 255, 255));
        jLabeFondo.setForeground(new java.awt.Color(255, 255, 255));
        jLabeFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fondo/Background_2.png"))); // NOI18N
        jPanel1.add(jLabeFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 30, 360, 520));
        jPanel1.add(jLabelImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 400, 250));

        JlsLIstaCanciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fondo/Background.jpg"))); // NOI18N
        JlsLIstaCanciones.setMaximumSize(new java.awt.Dimension(830, 700));
        JlsLIstaCanciones.setMinimumSize(new java.awt.Dimension(830, 700));
        JlsLIstaCanciones.setPreferredSize(new java.awt.Dimension(830, 700));
        jPanel1.add(JlsLIstaCanciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(-110, -16, 930, 780));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 820, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReproducirActionPerformed
     
       int indice=jListAgregarCanciones.getSelectedIndex();
        if(archivo!=null && Audio.getStatus()!=0 && indice!=-1){
           String ReproducirCancion= datos.get(indice);
           
           archivo =new File(ReproducirCancion);
         
          jSliderBalance.setEnabled(true);
          jSliderControlVolumen.setEnabled(true);
          jSliderProgresoMP3.setEnabled(true);
          
          CaratulaCancion(archivo.toString());
         
           
          
          try{
             Audio.open(new File(ReproducirCancion));
         
              Audio.play();
              Audio.setGain(volumen);
              Audio.setPan(balance);
              int pista=jListAgregarCanciones.getAnchorSelectionIndex()+1;
             new JLaTexto(fuente1,"Pista :"+pista,jLabelPista,Color.WHITE ,15);
        
          }catch(BasicPlayerException ex){
              System.err.println(ex);
              System.err.println("el contenido de la caratula es demasiado grande");
          }
        }
        
        
    }//GEN-LAST:event_jButtonReproducirActionPerformed
    
    private void jButtonPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPararActionPerformed
       if(Audio.getStatus()==0){
           try{
            bloquear=true;
            Audio.stop();
            bloquear=false; 
              
           }catch(BasicPlayerException ex){
         Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex);
           }

       }
        
        
        
    }//GEN-LAST:event_jButtonPararActionPerformed

    private void jButtonPausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPausarActionPerformed
      if(Audio.getStatus()==1){
          try{
          
          Audio.resume();
          }catch(BasicPlayerException ex){
         Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex);          }
      }else if(Audio.getStatus()==0){
            try{
          
          Audio.pause();
          }catch(BasicPlayerException ex){
         Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex);          
      }
        
      }  
         
    }//GEN-LAST:event_jButtonPausarActionPerformed

    private void jButtonRetrocesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetrocesoActionPerformed
    
        if(jListAgregarCanciones.getSelectedIndex()!=0){
         
         bloquear=true;
         Comprobacion(-1); 
         bloquear=false;
         
     }      
    }//GEN-LAST:event_jButtonRetrocesoActionPerformed

    private void jButtonAvanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAvanceActionPerformed
    
        if(jListAgregarCanciones.getSelectedIndex()+1 !=agregarCanciones.length){
         
         bloquear=true;
         Comprobacion(1); 
         bloquear=false;
         
     }            
    }//GEN-LAST:event_jButtonAvanceActionPerformed

    private void jButtonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguienteActionPerformed
      
      if(!siguiente){
         
          if(siguiente){
            new BotonesEscucha(jButtonSiguiente,"133-spinner11.png","133-spinner11.png");   
            jButtonSiguiente.setIcon(new ImageIcon(getClass().getResource("Botones/133-spinner11.png")));
            siguiente=false;
      } else{
            new BotonesEscucha(jButtonSiguiente,"133-spinner11.png","133-spinner11.png");   
            jButtonSiguiente.setIcon(new ImageIcon(getClass().getResource("Botones/133-spinner11.png")));
            siguiente=true;
  
          } 
      }  
    }//GEN-LAST:event_jButtonSiguienteActionPerformed

    private void jButtonRepetirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRepetirActionPerformed
      if(!siguiente){
          
          if(repitaCancion){
              new BotonesEscucha(jButtonRepetir,"302-loop.png","302-loop.png");
              jButtonRepetir.setIcon(new ImageIcon(getClass().getResource("Botones/302-loop.png")));
              repitaCancion=false;
              System.err.println(repitaCancion);
          }else{
               new BotonesEscucha(jButtonRepetir,"302-loop.png","302-loop.png");
                jButtonRepetir.setIcon(new ImageIcon(getClass().getResource("Botones/302-loop.png")));
                repitaCancion=true;
                 System.err.println(repitaCancion);
          }
      }
       
    }//GEN-LAST:event_jButtonRepetirActionPerformed

    private void jButtonDirectorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDirectorioActionPerformed
    
        abrirFile.setDialogTitle("Ruta Absoluta Busqueda...");
        abrirFile.setFileFilter(filtrado);
        abrirFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        if (abrirFile.showOpenDialog(jPanel1)==0){
            File file=new File(""+abrirFile.getSelectedFile());
            String argumento= file.getName();
            argumento=argumento.substring(argumento.length()-3,argumento.length());
      
              if(file.exists()&& argumento.equals("mp3")){
                  archivo=abrirFile.getSelectedFile();
                try{
                   audioFile= AudioFileIO.read(archivo);
                   tag=audioFile.getTag();
                }catch(CannotReadException |IOException|TagException|ReadOnlyFileException|
                        InvalidAudioFrameException ex){
                    System.err.println("Error no hay acrchivo en el argumento"+archivo);
                   }  
                ruta=abrirFile.getCurrentDirectory().toString();
                new JLaTexto(fuente1,"Ruta :"+ruta,jLabelRuta,Color.WHITE ,15);
                datos.add(archivo.toString());
                agregarCanciones= new String[datos.size()];
                
                int x=0;
                for(String canciones:datos){
                    File introduce=new File(canciones);
                    agregarCanciones[x]= introduce.getName();
                    x++;
                }
                jListAgregarCanciones.setListData(agregarCanciones);
                
                JLaEtiquetas(archivo);
              }
          
        }
        
    }//GEN-LAST:event_jButtonDirectorioActionPerformed
    
    private void jButtonRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRutaActionPerformed
       
        abrirFile.setDialogTitle("Directorio Abrir Canciones");
        abrirFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
     if (abrirFile.showOpenDialog(jPanel1)==0){
         ruta=abrirFile.getSelectedFile().toString();
         
          new JLaTexto(fuente1,"Ruta :"+ruta,jLabelRuta,Color.WHITE ,15);
     }
        
        
        
        
    }//GEN-LAST:event_jButtonRutaActionPerformed

    private void jButtonAgregarCancionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarCancionesActionPerformed
      
        if(ruta!= null && Audio.getStatus()!=1){
          
           archivo= new File(ruta);
           AgregarCanciones agre= new AgregarCanciones(agregarCanciones,archivo,datos,jListAgregarCanciones);
           agregarCanciones=agre.agregaGet();
             
              if(archivo!=null){
                jListAgregarCanciones.setSelectedIndex(0);
                archivo = new File(datos.get(0));
             }
       }
        
        
    }//GEN-LAST:event_jButtonAgregarCancionesActionPerformed

    private void jButtonMuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMuteActionPerformed
      if(archivo!=null){
          if(mute){
              volumen=volumenM;
              jSliderControlVolumen.setValue((int)(volumen*100));
               new BotonesEscucha(jButtonMute,"030-feed.png","030-feed.png");
                 jButtonMute.setIcon(new ImageIcon(getClass().getResource("Botones/030-feed.png")));
                  mute=false;
          }else{
             volumenM=volumen;
             volumen=0f;
              jSliderControlVolumen.setValue(0);
               new BotonesEscucha(jButtonMute,"030-feed.png","030-feed.png");
                 jButtonMute.setIcon(new ImageIcon(getClass().getResource("Botones/030-feed.png")));
                  mute=true; 
         }
      }       
    }//GEN-LAST:event_jButtonMuteActionPerformed

   
    public static void main(String args[]) {
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceGrafica().setVisible(true);
            }
        });
    }
    public void JlistListener(){
      JlsLIstaCanciones.addMouseListener(new MouseAdapter() {
      
      @Override
      public void mouseClicked(MouseEvent e){
          
          int indice= jListAgregarCanciones.getSelectedIndex();
          if(indice!= -1){
              String ReproduceCancion= datos.get(indice);
              File file=new File(ReproduceCancion);
             
              try{
                audioFile= AudioFileIO.read(file);
                tag=audioFile.getTag();
              }catch(CannotReadException |IOException|TagException|ReadOnlyFileException|NullPointerException|
                        InvalidAudioFrameException ex){
                  Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex);}
                 
              JLaEtiquetas(file);
                  CaratulaCancion(file.toString());
                 
                  if(e.getClickCount()==2){
                     try{
                       bloquear=true;
                       Audio.stop();
                       bloquear=false;
                     }catch(BasicPlayerException  ex){
                       Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex); }
                     jButtonReproducir.doClick();
                     if(Audio.getStatus()==2){
                        jButtonReproducir.doClick();  
                     }             }
                  }
              }
          
      });
      
    }
           
    
   public void CaratulaCancion(String rut){
      
       Image img =null;
       try{
       Mp3File Mp3A= new  Mp3File(rut);
       
       if(Mp3A.hasId3v2Tag()){
           ID3v2 idTag=Mp3A.getId3v2Tag();
           byte[] datosImagen =idTag.getAlbumImage();
           img= ImageIO.read(new ByteArrayInputStream(datosImagen));
       }
       else{
           img= ImageIO.read(getClass().getResource("Fondo/clave.jpg"));
       }
       
   } 
    catch(IllegalArgumentException|IOException ex1){System.err.println("No especificas ruta");}
    catch(NullPointerException e1){System.err.println("No hay caratula en el MP3");
    try{
     
        img= ImageIO.read(getClass().getResource("Fondo/clave.jpg")); 
    }
    catch(IOException e){}
    }
    catch(UnsupportedTagException | InvalidDataException e){}

   int ancho=img.getWidth(null);
   int alto=img.getHeight(null);
   
     if(ancho > 390){
    ancho=390;
      }
     if(alto > 270){
     alto=270;
    }
     img=img.getScaledInstance(ancho, alto, 0);
   jLabelImagen.setIcon(new ImageIcon(img));
    
   }   
    
   public void CalculoSegundario(String milisegundos,String texto, JLabel label){
       float horas,min;
       float segundosTotal= Integer.parseInt(milisegundos)/1000000;
       
       horas= (int)segundosTotal/3600;
       min=(int)segundosTotal/60-horas *60;
       segundosTotal=segundosTotal-min*60-horas*3600;
       
       String secundero=(int)horas+":"+(int)min+":"+(int)segundosTotal;
      
       new JLaTexto(fuente1,texto+secundero,label,c2,15);
   }
   public void basic_playerlistener(){
       Audio.addBasicPlayerListener(new  BasicPlayerListener(){
        @Override
        public void opened(Object o,Map map ){
            
        CalculoSegundario(map.get("duration").toString(), "Duracion :",jLabelTiempo);
         new JLaTexto(fuente1,"Tasa de Bits"+map.get("bitrate"),jLabelBitrate,c ,15);
         new JLaTexto(fuente1,"Velocidad de Muestreo"+map.get("mp3.frecuency.hz"),jLabelFRate,c ,15);
       
        jSliderProgresoMP3.setMaximum(Integer.parseInt(map.get("mp3.length.bytes").toString()));
        jSliderProgresoMP3.setMinimum(0);
        
        }

           @Override
           public void progress(int i, long l, byte[] bytes, Map propiedades) {
           CalculoSegundario(propiedades.get("mp3.position.microseconds").toString(), "Transcurrido",jLabelTranscurrido);
           Object bytesTranscurrido= propiedades.get("mp3.position.byte");
           bytesTranscurrido=Integer.parseInt(bytesTranscurrido.toString());
            jSliderProgresoMP3.setValue((int)bytesTranscurrido);
            
           }

           @Override
           public void stateUpdated(BasicPlayerEvent bpe) {
            
               if(!bloquear){
                   if(Audio.getStatus()==2 && repitaCancion){
                   jButtonReproducir.doClick();
                   }
                   if(jListAgregarCanciones.getSelectedIndex()+1!=agregarCanciones.length){
                      if(Audio.getStatus()==2 && siguiente){
                          int pista=jListAgregarCanciones.getAnchorSelectionIndex();
                         jListAgregarCanciones.setSelectedIndex(pista+1);
                          repaint();
                           jButtonReproducir.doClick();
                      }
                   }
                   
               }
          }

           @Override
           public void setController(BasicController bc) {
         }
          
       });
   }
   
   public void SliderChange(){
    
    jSliderProgresoMP3.addMouseListener(new MouseAdapter() {
     @Override
      public void mousePressed(MouseEvent e){
          try{
              Audio.pause();
          }catch(BasicPlayerException ex){
              Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex);  
          }
      }
   
    @Override 
    public void mouseReleased(MouseEvent e){
        try{
            jSliderProgresoMP3.setValue( jSliderProgresoMP3.getValue());
            Audio.resume();
            Audio.seek(jSliderProgresoMP3.getValue());
            Audio.setGain(volumen);
            Audio.setPan(balance);
            
        }catch(BasicPlayerException ex){
         Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex); }
    }
    
    
    });   
  
    jSliderControlVolumen.addChangeListener(new ChangeListener(){
        @Override
        public void stateChanged(ChangeEvent ce) {
          if(Audio.getStatus()!=-1){
              try{
                
             volumen = jSliderControlVolumen.getValue() /100f;
              
                Audio.setGain(volumen);
            new JLaTexto(fuente2,"Volumen :" +volumen, jLabelVolumen,c ,15);
              }catch(BasicPlayerException ex){
         Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex); }
          } 
            
            
            
        }
    
    });
   
    jSliderBalance.addChangeListener(new ChangeListener(){  
        @Override
        public void stateChanged(ChangeEvent ce) {
            if(Audio.getStatus()!=-1){
              try{
               balance=jSliderBalance.getValue()/100f;
                 Audio.setPan(balance);
                  new JLaTexto(fuente2,"balance :" +balance ,jLabelBalance,c ,15);
              }catch(BasicPlayerException ex){
         Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex); }
            } 
        }
    
     
     });
   }     
   
  public void Comprobacion(int opera){
       int indice= jListAgregarCanciones.getSelectedIndex();
       if(archivo!=null && indice!=-1&& Audio.getStatus()==0){
           int pista=jListAgregarCanciones.getAnchorSelectionIndex();
           jListAgregarCanciones.setSelectedIndex(pista+opera);
           
           try{
             Audio.stop();
           }catch(BasicPlayerException ex){
         Logger.getLogger(InterfaceGrafica.class.getName()).log(Level.SEVERE,null,ex);
           }
            jButtonReproducir.doClick();
       }
      
  }

  public void JLaEtiquetas(File file){
       new JLaTexto(fuente1,"Total :"+datos.size(),jLabelTotal,Color.WHITE ,15);
        new JLaTexto(fuente1,"Cancion :"+file.getName() ,jLabelCancion,c ,15);
         new JLaTexto(fuente1,"Peso :"+file.length() ,jLabelTamano,c ,15);
       try{
           new JLaTexto(fuente1,"Titulo :"+tag.getFirst(FieldKey.TITLE) ,jLabelTitulo,c ,15); 
           new JLaTexto(fuente1,"Genero :"+tag.getFirst(FieldKey.GENRE) , jLabelGenero,c ,15);
           new JLaTexto(fuente1,"Grupo :"+tag.getFirst(FieldKey.ARTIST) , jLabelGrupo,c ,15);           
            new JLaTexto(fuente1,"Fecha :"+tag.getFirst(FieldKey.YEAR) , jLabelFecha,c ,15);
            new JLaTexto(fuente1,"Album :"+tag.getFirst(FieldKey.ALBUM) , jLabelAlbum,c ,15);
            new JLaTexto(fuente1,"Comentario :"+tag.getFirst(FieldKey.COMMENT),jLabelComentario,c ,15);
       }catch(NullPointerException e){
           System.err.println("error en els etiquetas el tag es igual a "+tag);
       
       c=new Color(58,68,72);
        new JLaTexto(fuente1,"Titulo :",jLabelTitulo,c ,15);
       new JLaTexto(fuente1,"Genero :" , jLabelGenero,c ,15);
           new JLaTexto(fuente1,"Grupo :", jLabelGrupo,c ,15);           
            new JLaTexto(fuente1,"Fecha :", jLabelFecha,c ,15);
            new JLaTexto(fuente1,"Album :", jLabelAlbum,c ,15);
            new JLaTexto(fuente1,"Comentario :",jLabelComentario,c ,15);
          
            c=Color.BLACK;
               }
       
       
       
  }
  
  
  
    private Color c =Color.BLACK;
    private final Color c1= new Color(153,225,153);
    private final Color c2= new Color(225,225,204);
    private final String fuente1="Georgia";
    private final String fuente2="Segoe Print";
    private boolean mute=false;
    private boolean bloquear=false;
    private boolean repitaCancion=false;
    private boolean siguiente=false;
    private float balance=0.5f;
    private float volumenM;
    private float volumen=0.8f;
    
    private final BasicPlayer Audio= new BasicPlayer();
    FileNameExtensionFilter filtrado=new FileNameExtensionFilter("Solo mp3","mp3");
    
    private String ruta="C:/Users/PcProgram/Music/";
    private final JFileChooser abrirFile=new JFileChooser(new File(ruta));
    
    private File archivo=null;
    private Tag tag;
    private AudioFile audioFile=new AudioFile();
    
    private String agregarCanciones[]=new String[10];
    private ArrayList<String> datos=new ArrayList<>();
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JlsLIstaCanciones;
    private javax.swing.JButton jButtonAgregarCanciones;
    private javax.swing.JButton jButtonAvance;
    private javax.swing.JButton jButtonDirectorio;
    private javax.swing.JButton jButtonMute;
    private javax.swing.JButton jButtonParar;
    private javax.swing.JButton jButtonPausar;
    private javax.swing.JButton jButtonRepetir;
    private javax.swing.JButton jButtonReproducir;
    private javax.swing.JButton jButtonRetroceso;
    private javax.swing.JButton jButtonRuta;
    private javax.swing.JButton jButtonSiguiente;
    private javax.swing.JLabel jLabeFondo;
    private javax.swing.JLabel jLabelAlbum;
    private javax.swing.JLabel jLabelBalance;
    private javax.swing.JLabel jLabelBitrate;
    private javax.swing.JLabel jLabelCancion;
    private javax.swing.JLabel jLabelComentario;
    private javax.swing.JLabel jLabelFRate;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelGenero;
    private javax.swing.JLabel jLabelGrupo;
    private javax.swing.JLabel jLabelImagen;
    private javax.swing.JLabel jLabelInterface;
    private javax.swing.JLabel jLabelPista;
    private javax.swing.JLabel jLabelRuta;
    private javax.swing.JLabel jLabelTamano;
    private javax.swing.JLabel jLabelTexto;
    private javax.swing.JLabel jLabelTiempo;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JLabel jLabelTranscurrido;
    private javax.swing.JLabel jLabelVolumen;
    private javax.swing.JList<String> jListAgregarCanciones;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderBalance;
    private javax.swing.JSlider jSliderControlVolumen;
    private javax.swing.JSlider jSliderProgresoMP3;
    // End of variables declaration//GEN-END:variables
}
